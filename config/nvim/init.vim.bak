" Remap leader

let mapleader = " "
let maplocalleader = " "

source ~/.config/nvim/options.vim
source ~/.config/nvim/autocmd.vim

call plug#begin()

" Editor
Plug 'windwp/nvim-autopairs'
Plug 'numToStr/Comment.nvim'
Plug 'tpope/vim-surround'
Plug 'maxbrunsfeld/vim-yankstack'
Plug 'ggandor/lightspeed.nvim'

" Completion
if !exists('g:vscode')
    Plug 'hrsh7th/nvim-cmp'
    Plug 'hrsh7th/cmp-buffer'
    Plug 'hrsh7th/cmp-path'
    Plug 'hrsh7th/cmp-cmdline'
    Plug 'L3MON4D3/LuaSnip'
    Plug 'saadparwaiz1/cmp_luasnip'
endif

" LSP
if !exists('g:vscode')
    Plug 'neovim/nvim-lspconfig'
    Plug 'hrsh7th/cmp-nvim-lsp'
    Plug 'williamboman/nvim-lsp-installer'
endif

" Visual aid
if !exists('g:vscode')
    Plug 'akinsho/bufferline.nvim'
    Plug 'lukas-reineke/indent-blankline.nvim'
    Plug 'folke/which-key.nvim'
    Plug 'folke/twilight.nvim'
endif

" File tree
if !exists('g:vscode')
    Plug 'kyazdani42/nvim-web-devicons'
    Plug 'kyazdani42/nvim-tree.lua'
    Plug 'mcchrish/nnn.vim'
    Plug 'ms-jpq/chadtree', {'branch': 'chad', 'do': 'python3 -m chadtree deps'}
endif

" Misc
Plug 'airblade/vim-rooter'

" Git
if !exists('g:vscode')
    Plug 'tpope/vim-fugitive'
    Plug 'lewis6991/gitsigns.nvim'
    Plug 'junegunn/gv.vim'
endif

" Telescope
if !exists('g:vscode')
    Plug 'nvim-lua/popup.nvim'
    Plug 'nvim-lua/plenary.nvim'
    Plug 'nvim-telescope/telescope.nvim'
    Plug 'nvim-telescope/telescope-fzy-native.nvim'
endif

" Utils
Plug 'lambdalisue/suda.vim'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'

" Appearance
if !exists('g:vscode')
    Plug 'morhetz/gruvbox'
    Plug 'nvim-lualine/lualine.nvim'
    Plug 'folke/tokyonight.nvim', { 'branch': 'main' }
    Plug 'catppuccin/nvim', { 'as': 'catppuccin' }
    Plug 'rebelot/kanagawa.nvim'
    Plug 'rose-pine/neovim'
    Plug 'huyvohcmc/atlas.vim'
    Plug 'aditya-azad/candle-grey'
    Plug 'AlessandroYorba/Alduin'
    Plug 'cocopon/iceberg.vim'
    Plug 'gkeep/iceberg-dark'
    Plug 'cseelus/vim-colors-lucid'
    Plug 'joshdick/onedark.vim'
    Plug 'sonph/onehalf', { 'rtp': 'vim' }
    Plug 'nikolvs/vim-sunbather'
endif

call plug#end()


call yankstack#setup()


lua << EOF
require('nvim-autopairs').setup({
  enable_check_bracket_line = false,
  ignored_next_char = "[%w%.]" -- will ignore alphanumeric and `.` symbol
})
require('lightspeed').setup{}
require('Comment').setup()
EOF

if !exists('g:vscode')
    lua << EOF
    require('gitsigns').setup()
    require("which-key").setup {}
    require("twilight").setup {}
    require("bufferline").setup {}
    require('lualine').setup {
      options = {
        icons_enabled = true,
        theme = 'catppuccin',
        -- component_separators = { left = '', right = ''},
        -- section_separators = { left = '', right = ''},
        component_separators = "|",
        section_separators = " ",
        disabled_filetypes = {},
        always_divide_middle = true,
        globalstatus = false,
      },
      sections = {
        lualine_a = {'mode'},
        lualine_b = {'branch', 'diff', 'diagnostics'},
        lualine_c = {
          {
            'filetype',
            icon_only = true,
            separator = '',
          },
          {
            'filename',
            file_status = true,      -- Displays file status (readonly status, modified status)
            path = 1,                -- 0: Just the filename
                                     -- 1: Relative path
                                     -- 2: Absolute path

            shorting_target = 40,    -- Shortens path to leave 40 spaces in the window
                                     -- for other components. (terrible name, any suggestions?)
            symbols = {
              modified = ' [+]',      -- Text to show when the file is modified.
              readonly = ' [-]',      -- Text to show when the file is non-modifiable or readonly.
              unnamed = ' [No Name]', -- Text to show for unnamed buffers.
            }
          }
        },
        lualine_x = {'encoding', 'fileformat'},
        lualine_y = {'progress'},
        lualine_z = {'location'}
      },
      inactive_sections = {
        lualine_a = {},
        lualine_b = {},
        lualine_c = {'filename'},
        lualine_x = {'location'},
        lualine_y = {},
        lualine_z = {}
      },
      tabline = {},
      extensions = {}
    }
EOF
endif


" indent blankline
if !exists('g:vscode')
    lua << EOF
    -- vim.opt.list = true
    -- vim.opt.listchars:append("space:⋅")

    -- require("ibl").setup {
    --     show_end_of_line = true,
    --     space_char_blankline = " ",
    --     -- show_current_context = true,
    --     -- show_current_context_start = true,
    -- }
EOF
endif

" nnn
let $NNN_PLUG="z:autojump;d:dragdrop;c:fzcd;f:fzopen;p:preview-tabbed;"
let $NNN_TRASH="1"
let $NNN_OPTS="adexDHU"

" Lightline config
if !exists('g:vscode')
    " let g:lightline = {'colorscheme': 'minimal'}
    " set laststatus=2
    " set noshowmode

    " gruvbox
    " let g:gruvbox_transparent_bg = 1
    " let g:gruvbox_contrast_dark = 'hard'
    " let g:gruvbox_contrast_light = 'soft'
    " let g:gruvbox_invert_signs = 1
    " set background=dark
    " colorscheme gruvbox
    " let g:lightline = {'colorscheme': 'gruvbox'}

    " tokyonight
    " let g:tokyonight_style = 'night'
    " colorscheme tokyonight
    " let g:lightline = {'colorscheme': 'tokyonight'}

    " catppuccin
lua << EOF
    local catppuccin = require("catppuccin")
    -- configured directly in plugged/
    catppuccin.setup({
      transparent_background = false,
      integrations = {
        gitgutter = true,
        lightspeed = true
      }
    })
EOF
    colorscheme catppuccin
    let g:lightline = {'colorscheme': 'catppuccin'}
endif

" kanagawa
" colorscheme kanagawa

" rose-pine
" set background=light
" colorscheme rose-pine

" atlas
" colorscheme atlas
" let g:lightline.colorscheme = 'atlas'

" candle-grey
" colorscheme candle-grey
" colorscheme candle-grey-transparent

" alduin
" let g:alduin_Shout_Dragon_Aspect = 1
" let g:alduin_Shout_Become_Ethereal = 1
" colorscheme alduin

" iceberg
" colorscheme iceberg
" let g:lightline.colorscheme = 'icebergDark'

" lucid
" colorscheme lucid

" onedark
" colorscheme onedark
" let g:lightline.colorscheme = 'onedark'

" onehalf
" colorscheme onehalfdark
" let g:lightline_theme='onehalfdark'

" sunbather
" colorscheme sunbather

if !exists('g:vscode')
lua << EOF
    -- each of these are documented in `:help nvim-tree.OPTION_NAME`
    -- require'nvim-tree'.setup { -- BEGIN_DEFAULT_OPTS
    --   disable_netrw = true,
    --   hijack_netrw = true,
    --   view = {
    --     width = 30,
    --     height = 30,
    --     side = "left",
    --     mappings = {
    --       custom_only = false,
    --       list = {
    --         -- user mappings go here
    --       },
    --     },
    --   },
    --   update_focused_file = {
    --     enable = true,
    --     update_cwd = false,
    --     ignore_list = {},
    --   },
    --   diagnostics = {
    --     enable = true,
    --     show_on_dirs = true,
    --     icons = {
    --       hint = "",
    --       info = "",
    --       warning = "",
    --       error = "",
    --     },
    --   },
    --   filters = {
    --     dotfiles = false,
    --     custom = {},
    --     exclude = {},
    --   },
    --   git = {
    --     enable = true,
    --     ignore = false,
    --     timeout = 400,
    --   },
    --   actions = {
    --     change_dir = {
    --       enable = false,
    --       global = false,
    --     },
    --     open_file = {
    --       quit_on_open = false,
    --       resize_window = false,
    --       window_picker = {
    --         enable = true,
    --         chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890",
    --         exclude = {
    --           filetype = { "notify", "packer", "qf", "diff", "fugitive", "fugitiveblame" },
    --           buftype = { "nofile", "terminal", "help" },
    --         },
    --       },
    --     },
    --   },
    -- } -- END_DEFAULT_OPTS
EOF
endif

set completeopt=menu,menuone,noselect

if !exists('g:vscode')
lua <<EOF
    local cmp_status_ok, cmp = pcall(require, "cmp")
    if not cmp_status_ok then
      return
    end

    local snip_status_ok, luasnip = pcall(require, "luasnip")
    if not snip_status_ok then
      return
    end

    require("luasnip/loaders/from_vscode").lazy_load()

    local check_backspace = function()
      local col = vim.fn.col "." - 1
      return col == 0 or vim.fn.getline("."):sub(col, col):match "%s"
    end

    --   פּ ﯟ   some other good icons
    local kind_icons = {
      Text = "",
      Method = "m",
      Function = "",
      Constructor = "",
      Field = "",
      Variable = "",
      Class = "",
      Interface = "",
      Module = "",
      Property = "",
      Unit = "",
      Value = "",
      Enum = "",
      Keyword = "",
      Snippet = "",
      Color = "",
      File = "",
      Reference = "",
      Folder = "",
      EnumMember = "",
      Constant = "",
      Struct = "",
      Event = "",
      Operator = "",
      TypeParameter = "",
    }
    -- find more here: https://www.nerdfonts.com/cheat-sheet

    cmp.setup {
      snippet = {
        expand = function(args)
          luasnip.lsp_expand(args.body) -- For `luasnip` users.
        end,
      },
      mapping = {
        ["<C-k>"] = cmp.mapping.select_prev_item(),
            ["<C-j>"] = cmp.mapping.select_next_item(),
        ["<C-b>"] = cmp.mapping(cmp.mapping.scroll_docs(-1), { "i", "c" }),
        ["<C-f>"] = cmp.mapping(cmp.mapping.scroll_docs(1), { "i", "c" }),
        ["<C-Space>"] = cmp.mapping(cmp.mapping.complete(), { "i", "c" }),
        ["<C-y>"] = cmp.config.disable, -- Specify `cmp.config.disable` if you want to remove the default `<C-y>` mapping.
        ["<C-e>"] = cmp.mapping {
          i = cmp.mapping.abort(),
          c = cmp.mapping.close(),
        },
        -- Accept currently selected item. If none selected, `select` first item.
        -- Set `select` to `false` to only confirm explicitly selected items.
        ["<CR>"] = cmp.mapping.confirm { select = true },
        ["<Tab>"] = cmp.mapping(function(fallback)
          if cmp.visible() then
            cmp.select_next_item()
          elseif luasnip.expandable() then
            luasnip.expand()
          elseif luasnip.expand_or_jumpable() then
            luasnip.expand_or_jump()
          elseif check_backspace() then
            fallback()
          else
            fallback()
          end
        end, {
          "i",
          "s",
        }),
        ["<S-Tab>"] = cmp.mapping(function(fallback)
          if cmp.visible() then
            cmp.select_prev_item()
          elseif luasnip.jumpable(-1) then
            luasnip.jump(-1)
          else
            fallback()
          end
        end, {
          "i",
          "s",
        }),
      },
      formatting = {
        fields = { "kind", "abbr", "menu" },
        format = function(entry, vim_item)
          -- Kind icons
          vim_item.kind = string.format("%s", kind_icons[vim_item.kind])
          -- vim_item.kind = string.format('%s %s', kind_icons[vim_item.kind], vim_item.kind) -- This concatonates the icons with the name of the item kind
          vim_item.menu = ({
            luasnip = "[Snippet]",
            buffer = "[Buffer]",
            path = "[Path]",
          })[entry.source.name]
          return vim_item
        end,
      },
      sources = {
        { name = "luasnip" },
        { name = "buffer" },
        { name = "path" },
      },
      confirm_opts = {
        behavior = cmp.ConfirmBehavior.Replace,
        select = false,
      },
      -- documentation = {
      --   border = { "╭", "─", "╮", "│", "╯", "─", "╰", "│" },
      -- },
      experimental = {
        ghost_text = false,
        native_menu = false,
      },
    }
EOF
endif

source ~/.config/nvim/mappings.vim
