# ################################################################ #
# THE FOLLOWING IS AN EXPLANATION OF THE GRAMMAR THAT SKHD PARSES. #
# FOR SIMPLE EXAMPLE MAPPINGS LOOK FURTHER DOWN THIS FILE..        #
# ################################################################ #

# A list of all built-in modifier and literal keywords can
# be found at https://github.com/koekeishiya/skhd/issues/1
#
# A hotkey is written according to the following rules:
#
#   hotkey       = <mode> '<' <action> | <action>
#
#   mode         = 'name of mode' | <mode> ',' <mode>
#
#   action       = <keysym> '[' <proc_map_lst> ']' | <keysym> '->' '[' <proc_map_lst> ']'
#                  <keysym> ':' <command>          | <keysym> '->' ':' <command>
#                  <keysym> ';' <mode>             | <keysym> '->' ';' <mode>
#
#   keysym       = <mod> '-' <key> | <key>
#
#   mod          = 'modifier keyword' | <mod> '+' <mod>
#
#   key          = <literal> | <keycode>
#
#   literal      = 'single letter or built-in keyword'
#
#   keycode      = 'apple keyboard kVK_<Key> values (0x3C)'
#
#   proc_map_lst = * <proc_map>
#
#   proc_map     = <string> ':' <command> | <string>     '~' |
#                  '*'      ':' <command> | '*'          '~'
#
#   string       = '"' 'sequence of characters' '"'
#
#   command      = command is executed through '$SHELL -c' and
#                  follows valid shell syntax. if the $SHELL environment
#                  variable is not set, it will default to '/bin/bash'.
#                  when bash is used, the ';' delimeter can be specified
#                  to chain commands.
#
#                  to allow a command to extend into multiple lines,
#                  prepend '\' at the end of the previous line.
#
#                  an EOL character signifies the end of the bind.
#
#   ->           = keypress is not consumed by skhd
#
#   *            = matches every application not specified in <proc_map_lst>
#
#   ~            = application is unbound and keypress is forwarded per usual, when specified in a <proc_map>
#
# A mode is declared according to the following rules:
#
#   mode_decl = '::' <name> '@' ':' <command> | '::' <name> ':' <command> |
#               '::' <name> '@'               | '::' <name>
#
#   name      = desired name for this mode,
#
#   @         = capture keypresses regardless of being bound to an action
#
#   command   = command is executed through '$SHELL -c' and
#               follows valid shell syntax. if the $SHELL environment
#               variable is not set, it will default to '/bin/bash'.
#               when bash is used, the ';' delimeter can be specified
#               to chain commands.
#
#               to allow a command to extend into multiple lines,
#               prepend '\' at the end of the previous line.
#
#               an EOL character signifies the end of the bind.

# ############################################################### #
# THE FOLLOWING SECTION CONTAIN SIMPLE MAPPINGS DEMONSTRATING HOW #
# TO INTERACT WITH THE YABAI WM. THESE ARE SUPPOSED TO BE USED AS #
# A REFERENCE ONLY, WHEN MAKING YOUR OWN CONFIGURATION..          #
# ############################################################### #

# focus spaces
lcmd - 1 : ~/.config/yabai/focus_space.sh -m space --focus $(yabai -m query --displays --display | jq -r '.spaces[0]'); \
             if [[ "$?" -ne "0" ]]; then skhd -k "ctrl - 1"; fi
lcmd - 2 : ~/.config/yabai/focus_space.sh -m space --focus $(yabai -m query --displays --display | jq -r '.spaces[1]'); \
             if [[ "$?" -ne "0" ]]; then skhd -k "ctrl - 2"; fi
lcmd - 3 : ~/.config/yabai/focus_space.sh -m space --focus $(yabai -m query --displays --display | jq -r '.spaces[2]'); \
             if [[ "$?" -ne "0" ]]; then skhd -k "ctrl - 3"; fi
lcmd - 4 : ~/.config/yabai/focus_space.sh -m space --focus $(yabai -m query --displays --display | jq -r '.spaces[3]'); \
             if [[ "$?" -ne "0" ]]; then skhd -k "ctrl - 4"; fi
lcmd - 5 : ~/.config/yabai/focus_space.sh -m space --focus $(yabai -m query --displays --display | jq -r '.spaces[4]'); \
             if [[ "$?" -ne "0" ]]; then skhd -k "ctrl - 5"; fi
lcmd - 6 : ~/.config/yabai/focus_space.sh -m space --focus $(yabai -m query --displays --display | jq -r '.spaces[5]'); \
             if [[ "$?" -ne "0" ]]; then skhd -k "ctrl - 6"; fi
lcmd - 7 : ~/.config/yabai/focus_space.sh -m space --focus $(yabai -m query --displays --display | jq -r '.spaces[6]'); \
             if [[ "$?" -ne "0" ]]; then skhd -k "ctrl - 7"; fi
lcmd - 8 : ~/.config/yabai/focus_space.sh -m space --focus $(yabai -m query --displays --display | jq -r '.spaces[7]'); \
             if [[ "$?" -ne "0" ]]; then skhd -k "ctrl - 8"; fi
lcmd - 9 : ~/.config/yabai/focus_space.sh -m space --focus $(yabai -m query --displays --display | jq -r '.spaces[8]'); \
             if [[ "$?" -ne "0" ]]; then skhd -k "ctrl - 9"; fi
lcmd - 0 : ~/.config/yabai/focus_space.sh -m space --focus $(yabai -m query --displays --display | jq -r '.spaces[9]'); \
             if [[ "$?" -ne "0" ]]; then skhd -k "ctrl - 0"; fi

# move windows to space
lalt - 1 : ~/.config/yabai/focus_space.sh -m window --move 1
lalt - 2 : ~/.config/yabai/focus_space.sh -m window --move 2
lalt - 3 : ~/.config/yabai/focus_space.sh -m window --move 3
lalt - 4 : ~/.config/yabai/focus_space.sh -m window --move 4
lalt - 5 : ~/.config/yabai/focus_space.sh -m window --move 5
lalt - 6 : ~/.config/yabai/focus_space.sh -m window --move 6
lalt - 7 : ~/.config/yabai/focus_space.sh -m window --move 7
lalt - 8 : ~/.config/yabai/focus_space.sh -m window --move 8
lalt - 9 : ~/.config/yabai/focus_space.sh -m window --move 9
lalt - 0 : ~/.config/yabai/focus_space.sh -m window --move 10

# move windows to space and focus the space
shift + lalt - 1 : ~/.config/yabai/focus_space.sh -m window --move 1 --focus
shift + lalt - 2 : ~/.config/yabai/focus_space.sh -m window --move 2 --focus
shift + lalt - 3 : ~/.config/yabai/focus_space.sh -m window --move 3 --focus
shift + lalt - 4 : ~/.config/yabai/focus_space.sh -m window --move 4 --focus
shift + lalt - 5 : ~/.config/yabai/focus_space.sh -m window --move 5 --focus
shift + lalt - 6 : ~/.config/yabai/focus_space.sh -m window --move 6 --focus
shift + lalt - 7 : ~/.config/yabai/focus_space.sh -m window --move 7 --focus
shift + lalt - 8 : ~/.config/yabai/focus_space.sh -m window --move 8 --focus
shift + lalt - 9 : ~/.config/yabai/focus_space.sh -m window --move 9 --focus
shift + lalt - 0 : ~/.config/yabai/focus_space.sh -m window --move 10 --focus

# focus recent space
lcmd - tab : yabai -m space --focus recent
lalt - tab : yabai -m display --focus recent
lcmd + shift - tab : yabai -m window --focus recent

# focus window
lalt - h : yabai -m window --focus west
lalt - j : yabai -m window --focus south
lalt - k : yabai -m window --focus north
lalt - l : yabai -m window --focus east

# Iterate through stack
# lalt - [
lalt - 0x21 : yabai -m window --focus stack.prev || yabai -m window --focus stack.last
# lalt - ]
lalt - 0x1E : yabai -m window --focus stack.next || yabai -m window --focus stack.first

# swap window
lalt + shift - h : yabai -m window --swap west
lalt + shift - j : yabai -m window --swap south
lalt + shift - k : yabai -m window --swap north
lalt + shift - l : yabai -m window --swap east

# move managed window
meh - h : yabai -m window --stack west
meh - l : yabai -m window --stack east
meh - j : yabai -m window --stack south
meh - k : yabai -m window --stack north

# unstack + split
meh + cmd - h : yabai-stack west
meh + cmd - l : yabai-stack east
meh + cmd - j : yabai-stack south
meh + cmd - k : yabai-stack north

# warp window
lalt + cmd - h : yabai -m window --warp west
lalt + cmd - l : yabai -m window --warp east
lalt + cmd - j : yabai -m window --warp south
lalt + cmd - k : yabai -m window --warp north

# balance size of windows
# shift + lalt - display
shift + lalt - 0x18 : yabai -m space --balance

# rotate tree
lalt - r : yabai -m space --rotate 90
shift + lalt - r : yabai -m space --rotate 270

# Resize windows
lctrl + lalt - h : yabai -m window --resize left:-50:0; \
                  yabai -m window --resize right:-50:0
lctrl + lalt - j : yabai -m window --resize bottom:0:50; \
                  yabai -m window --resize top:0:50
lctrl + lalt - k : yabai -m window --resize top:0:-50; \
                  yabai -m window --resize bottom:0:-50
lctrl + lalt - l : yabai -m window --resize right:50:0; \
                  yabai -m window --resize left:50:0

# toggle fullscreen
# Make window native fullscreen
lalt - f         : yabai -m window --toggle zoom-fullscreen
shift + lalt - f : yabai -m window --toggle native-fullscreen
shift + lalt - space : yabai -m window --toggle float

lalt - t : yabai -m window --toggle split

lalt - b : yabai -m config layout bsp
lalt - s : yabai -m config layout stack
lalt - q : yabai -m window --close
lalt - o : yabai -m space --create; yabai -m space --focus last
lalt + shift - o : yabai -m space --create; yabai -m window --space last; yabai -m space --focus last
# lalt - ,
lalt - 0x2B : ~/.config/yabai/focus_space.sh -m space --focus left
# lalt - .
lalt - 0x2F : ~/.config/yabai/focus_space.sh -m space --focus right
# lalt + shift - 0x2F : yabai -m window --space next; yabai -m space --focus next
lalt + shift - 0x2B : ~/.config/yabai/focus_space.sh -m window --move left
lalt + shift - 0x2F : ~/.config/yabai/focus_space.sh -m window --move right
lalt + ctrl - 0x2B : ~/.config/yabai/focus_space.sh -m window --move left  --focus
lalt + ctrl - 0x2F : ~/.config/yabai/focus_space.sh -m window --move right --focus
lalt + lcmd - 0x2B : yabai -m window --display prev; yabai -m display --focus prev
lalt + lcmd - 0x2F : yabai -m window --display next; yabai -m display --focus next

# TODO: Extend ~/.config/yabai/focus_space.sh to support displays
